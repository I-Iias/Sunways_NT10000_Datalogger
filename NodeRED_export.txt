[
    {
        "id": "46efba90.c91554",
        "type": "tab",
        "label": "Flow 1"
    },
    {
        "id": "3a75e211.4930ee",
        "type": "tab",
        "label": "Flow 2"
    },
    {
        "id": "b9ee919e.468a1",
        "type": "tab",
        "label": "Flow 3"
    },
    {
        "id": "c7d88893.396ce8",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "bin",
        "out": "char",
        "addchar": false
    },
    {
        "id": "d6509987.c55068",
        "type": "ui_group",
        "z": "",
        "name": "Wechselrichter Info",
        "tab": "4c2cb675.22cc58",
        "order": 1,
        "disp": true,
        "width": "5"
    },
    {
        "id": "4c2cb675.22cc58",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "ccb47487.fc7c88",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a1a56ac3.5e8868",
        "type": "MySQLdatabase",
        "z": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Photovoltaik_Daten",
        "tz": "UTC+1"
    },
    {
        "id": "f8d21c38.6bc45",
        "type": "ui_tab",
        "z": "",
        "name": "Database",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "cc10e938.342c08",
        "type": "ui_group",
        "z": "",
        "name": "aktuelle Daten",
        "tab": "4c2cb675.22cc58",
        "order": 2,
        "disp": true,
        "width": "16"
    },
    {
        "id": "1a57e085.8db03f",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "13",
        "bin": "bin",
        "out": "count",
        "addchar": false
    },
    {
        "id": "61a653aa.607b7c",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": false
    },
    {
        "id": "74a29015.2cafa",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "500",
        "bin": "bin",
        "out": "time",
        "addchar": false
    },
    {
        "id": "10f4bc2d.b9c834",
        "type": "ui_group",
        "z": "",
        "name": "Gauge",
        "tab": "251aa0ae.c1b0e",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "251aa0ae.c1b0e",
        "type": "ui_tab",
        "z": "",
        "name": "Restore",
        "icon": "dashboard"
    },
    {
        "id": "6c6668c7.c4f718",
        "type": "ui_group",
        "z": "",
        "name": "Gauge",
        "tab": "715b3bc8.948b14",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "715b3bc8.948b14",
        "type": "ui_tab",
        "z": "",
        "name": "Restore",
        "icon": "dashboard"
    },
    {
        "id": "88e35b00.a73af8",
        "type": "ui_group",
        "z": "",
        "name": "Tagesdaten",
        "tab": "4c2cb675.22cc58",
        "order": 3,
        "disp": true,
        "width": "18"
    },
    {
        "id": "7b2d2942.6d5928",
        "type": "ui_button",
        "z": "46efba90.c91554",
        "name": "get_serial",
        "group": "d6509987.c55068",
        "order": 1,
        "width": "3",
        "height": "1",
        "label": "Seriennummer?",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Serial_number",
        "x": 309,
        "y": 611,
        "wires": [
            [
                "477cb47c.21ff2c"
            ]
        ]
    },
    {
        "id": "f0054e03.6dcdb",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "text_serial",
        "label": "Seriennummer: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1026,
        "y": 616,
        "wires": []
    },
    {
        "id": "25703c67.d90794",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "Online_data",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 304,
        "y": 727,
        "wires": [
            [
                "9e018990.a5d328"
            ]
        ]
    },
    {
        "id": "5c4ad855.b06528",
        "type": "serial out",
        "z": "46efba90.c91554",
        "name": "serial",
        "serial": "61a653aa.607b7c",
        "x": 824,
        "y": 1001,
        "wires": []
    },
    {
        "id": "7dab5d6f.7099f4",
        "type": "serial in",
        "z": "46efba90.c91554",
        "name": "serial",
        "serial": "61a653aa.607b7c",
        "x": 422,
        "y": 1019,
        "wires": [
            [
                "eccbb843.ed7198",
                "2957c431.31a22c"
            ]
        ]
    },
    {
        "id": "89028d26.98c31",
        "type": "inject",
        "z": "3a75e211.4930ee",
        "name": "Force",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 358,
        "y": 345,
        "wires": [
            [
                "f85fb505.488608"
            ]
        ]
    },
    {
        "id": "66c2713f.d59cd",
        "type": "debug",
        "z": "3a75e211.4930ee",
        "name": "output",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 950,
        "y": 273,
        "wires": []
    },
    {
        "id": "dffb940d.3d2b08",
        "type": "function",
        "z": "3a75e211.4930ee",
        "name": "timeConvert",
        "func": "if ( !msg.timestamp ) msg.timestamp = Math.round(+new Date());\n\nvar dt = new Date(msg.timestamp);\nvar msg = {\n\t'month':\tdt.getMonth() + 1,\n\t'day':\t\tdt.getDate(),\n\t'year':\t\tdt.getFullYear(),\n\t'hours':\tdt.getHours(),\n\t'mins':\t\tdt.getMinutes(),\n\t'secs':\tdt.getSeconds()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 754,
        "y": 273,
        "wires": [
            [
                "66c2713f.d59cd"
            ]
        ]
    },
    {
        "id": "f85fb505.488608",
        "type": "function",
        "z": "3a75e211.4930ee",
        "name": "set timestamp",
        "func": "msg.timestamp=1376763133 * 1000;\nreturn msg;",
        "outputs": 1,
        "x": 542,
        "y": 345,
        "wires": [
            [
                "dffb940d.3d2b08"
            ]
        ]
    },
    {
        "id": "a3a37f1b.14a7",
        "type": "inject",
        "z": "3a75e211.4930ee",
        "name": "Force",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 358,
        "y": 273,
        "wires": [
            [
                "dffb940d.3d2b08"
            ]
        ]
    },
    {
        "id": "6d0ef27a.9aea5c",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "serial_out",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 823,
        "y": 1060,
        "wires": []
    },
    {
        "id": "45b89d04.9cb384",
        "type": "ui_chart",
        "z": "46efba90.c91554",
        "name": "",
        "group": "cc10e938.342c08",
        "order": 1,
        "width": "16",
        "height": "7",
        "label": "Leistungskurve [kW]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "keine Daten verfügbar :(",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "14",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "x": 1284,
        "y": 804,
        "wires": [
            [
                "62297c74.f920a4"
            ],
            [
                "62297c74.f920a4"
            ]
        ]
    },
    {
        "id": "9e018990.a5d328",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Process Online data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n// make it part of the outgoing msg object\nmsg.count = count;\n\n// states: 0 = none, 2 = online, 3 = monthly, 4 = yearly\n\n\nvar db_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Online_data\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        count = 1;\n        context.set('count', count);\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x01, 0x04]);\n        msg_ser_out.topic = \"Online_data\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        msg_ser_out.topic = \"Online_data\";\n        if (count === 1)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data1\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x02, 0x05]);\n            count +=1;\n        }\n        else if (count === 2)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data2\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x03, 0x06]);\n            count +=1;\n        }\n        else if (count === 3)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data3\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0xff, 0x02]);\n            count +=1;\n        }\n        else if (count === 4)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data_overall\";\n            count = 0;\n            return [db_msg, null];\n        }\n        else // should not occur\n        {\n            // do nothing\n        }\n        context.set('count', count);\n        \n        // if received data is not the last one\n        return [db_msg, msg_ser_out];\n\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 553,
        "y": 765,
        "wires": [
            [
                "f8d06334.46215"
            ],
            [
                "35808314.d50abc"
            ]
        ]
    },
    {
        "id": "f8d06334.46215",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "write online data",
        "func": "if (msg.topic === \"Online_data1\" || msg.topic === \"Online_data2\" || msg.topic === \"Online_data3\")\n{\n    var buffer = msg.payload;\n    // convert data\n    var udc = buffer[0] * 2.8 + 200;\n    var idc = buffer[1] * 0.08;\n    var uac = buffer[2] + 100;\n    var iac = buffer[3] * 0.12;\n    var temp = buffer[4] - 40;  // Temperature\n    var s = buffer[5] * 6;      // radiation\n    var pdc = udc * idc;\n    var pac = uac * iac;\n    var wd = (buffer[6] * 256 + buffer[7]) *10 / 1000; // Tagesertrag kWh\n    var aux = buffer[11] & 0xC5;\n    var overflow = aux>>6 | (aux&4)<<1 | (aux&1)<<2;\n    var wtot = overflow * 65536 + buffer[8] * 256 + buffer[9];     // Gesamtertrag kWh\n    var error = buffer[10];\n    var data_string = \"'\" + udc + \"', '\" + idc + \"', '\" + uac + \"', '\" + iac + \"', '\" + pdc + \"', '\" + pac + \"', '\" + wd + \"', '\" + wtot + \"', '\" + error + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `\" + msg.topic + \"`(`U_dc`, `I_dc`, `U_ac`, `I_ac`, `P_dc`, `P_ac`, `Tagesertrag`, `Gesamtertrag`, `Fehlercode`) VALUES (\" + data_string + \")\";\n\n    return [db_msg, null];\n}\nelse if (msg.topic === \"Online_data_overall\")\n{\n    var buffer = msg.payload;\n    // convert data\n    var pdc = (buffer[0] * 256 + buffer[1])/1000;   // kW\n    var pac = (buffer[2] * 256 + buffer[3])/1000;   // kW\n    var temp = 0;\n    var radi = 0;\n    if (buffer[4] === 1) // no temperature sensor\n    {\n        temp = -40;\n    }\n    else \n    {\n        temp = buffer[4] - 40; // °C\n    }\n    if (buffer[5] === 1) // no radiation sensor\n    {\n        radi = 0;\n    }\n    else \n    {\n        radi = buffer[5] * 6;   // W/m^2\n    }\n    var wd = (buffer[6] * 256 + buffer[7]) * 10 / 1000; // Tagesertrag kWh\n    var aux = buffer[11] & 0xC5;\n    var overflow = aux>>6 | (aux&4)<<1 | (aux&1)<<2;\n    var wtot = overflow * 65536 + buffer[8] * 256 + buffer[9];     // Gesamtertrag kWh\n    var error = buffer[10];\n    // create database msg\n    var data_string = \"'\" + pdc + \"', '\" + pac + \"', '\" + temp + \"', '\" + radi + \"', '\" + wd + \"', '\" + wtot + \"', '\" + error + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `\" + msg.topic + \"`(`P_dc`, `P_ac`, `Temperatur`, `Radiation`, `Tagesertrag`, `Gesamtertrag`, `Fehlercode`) VALUES (\" + data_string + \")\";\n    \n    \n    var plot_pac = {payload: pac};\n    plot_pac.topic = \"pac\";\n    var print_wd = {payload: wd};\n    print_wd.topic = \"wd\";\n    var print_wtot = {payload: wtot};\n    print_wtot.topic = \"wtot\";\n    var print_error = {payload: error};\n    print_error.topic = \"error\";\n    return [db_msg, [plot_pac, print_wd, print_wtot, print_error]];\n}\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 837,
        "y": 760,
        "wires": [
            [
                "ae4d7923.72c7a8",
                "facfc718.98d5b8"
            ],
            [
                "c7a2ec36.3ad84",
                "86febc85.78f62"
            ]
        ]
    },
    {
        "id": "ae4d7923.72c7a8",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "database_input",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1220,
        "y": 756,
        "wires": []
    },
    {
        "id": "eccbb843.ed7198",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "ser_com",
        "func": "// manages serial communication\n// checks letgth of command and add checksum if needed\n// checks checksum of incoming data\n\n// initialise the topic to 0 if it doesn't exist already\nvar topic = context.get('topic')||0;\n\nfunction calculate_CS(buffer) {\n  CS = 0;\n  for (var i = 0; i<buffer.length; i++)\n  {\n      CS += buffer[i];\n  }\n  CS = CS % 256;\n  return CS;\n}\n\nif (msg.topic !== undefined) // command is written out\n{\n    topic = msg.topic;\n    // store the value topic back\n    context.set('topic',topic);\n    if (msg.payload.length === 5)\n    {\n        var cmd = {payload: msg.payload};\n        return [null, cmd];\n    }\n    else if (msg.payload.length === 4)\n    {\n        // add checksum\n        var CS = Buffer([calculate_CS(msg.payload)]);\n        //cmd_out = Buffer([msg.payload[0], msg.payload[1], msg.payload[2], msg.payload[3], CS])\n        cmd_out = Buffer.concat([msg.payload, CS], (msg.payload.length + 1));\n        var cmd = {payload: cmd_out};\n        return[null, cmd];\n        \n    }\n    else // no valid command\n    {\n        var cmd = {payload: 'error'};\n        return [cmd, null];\n    }\n    \n    \n}\nelse // receiving data from serial port\n{\n    topic = context.get('topic');\n    var input = msg.payload;\n    if (input.length === 13) // length of input is correct\n    {\n        var CS = calculate_CS(input.slice(0, 12));\n        if(CS !== input[12])\n        {\n            return[null, null];\n        }\n        var ser_data = {payload: input.slice(0, 12)};\n        ser_data.topic = topic;\n        return[ser_data, null];\n    }\n    else // input length is wrong\n    {\n        var cmd = {payload: 'length_error'};\n        return[cmd, null];\n    }\n    \n}",
        "outputs": "2",
        "noerr": 0,
        "x": 602,
        "y": 993,
        "wires": [
            [
                "9e018990.a5d328",
                "26690793.3c4438",
                "477cb47c.21ff2c",
                "72393470.15568c",
                "8e8e67e2.3b3cb8",
                "3407f58c.60f5ca"
            ],
            [
                "5c4ad855.b06528",
                "6d0ef27a.9aea5c"
            ]
        ]
    },
    {
        "id": "2311aa32.307e16",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 800,
        "y": 503,
        "wires": [
            [
                "d13b964a.0ffb38"
            ]
        ]
    },
    {
        "id": "d13b964a.0ffb38",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "",
        "func": "msg.topic = \"SELECT * FROM Fehlerspeicher ORDER BY Zeitstempel DESC LIMIT 3\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 969,
        "y": 502,
        "wires": [
            [
                "5f9d1092.95474"
            ]
        ]
    },
    {
        "id": "35808314.d50abc",
        "type": "delay",
        "z": "46efba90.c91554",
        "name": "Queue",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "6",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 442.5,
        "y": 964,
        "wires": [
            [
                "eccbb843.ed7198"
            ]
        ]
    },
    {
        "id": "26690793.3c4438",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "serial_data",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 816,
        "y": 912,
        "wires": []
    },
    {
        "id": "2957c431.31a22c",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "serial_in",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 588,
        "y": 1065,
        "wires": []
    },
    {
        "id": "477cb47c.21ff2c",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Process serial number",
        "func": "var db_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Serial_number\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x08, 0x01]);\n        msg_ser_out.topic = \"Serial_number\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        db_msg.payload = msg.payload;\n        db_msg.topic = \"serial_number\"\n        return [db_msg, null];\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 654,
        "wires": [
            [
                "c41e2fd4.90828"
            ],
            [
                "35808314.d50abc"
            ]
        ]
    },
    {
        "id": "1be3a602.fbc83a",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "Serial_number",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 310,
        "y": 654,
        "wires": [
            [
                "477cb47c.21ff2c"
            ]
        ]
    },
    {
        "id": "c41e2fd4.90828",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "print serial number",
        "func": "if (msg.topic === \"serial_number\") // should be always the case\n{\n    var text = msg.payload.toString();\n    msg = {payload: text};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 807,
        "y": 646,
        "wires": [
            [
                "f0054e03.6dcdb"
            ]
        ]
    },
    {
        "id": "3048fcec.a33434",
        "type": "comment",
        "z": "46efba90.c91554",
        "name": "Test for DB output",
        "info": "",
        "x": 680.5,
        "y": 1172,
        "wires": []
    },
    {
        "id": "facfc718.98d5b8",
        "type": "mysql",
        "z": "46efba90.c91554",
        "mydb": "a1a56ac3.5e8868",
        "name": "Datenbank",
        "x": 1208,
        "y": 704,
        "wires": [
            [
                "96104994.a901c8"
            ]
        ]
    },
    {
        "id": "4bb93702.905888",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "Online_data",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 293,
        "y": 777,
        "wires": [
            [
                "9e018990.a5d328"
            ]
        ]
    },
    {
        "id": "72393470.15568c",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Process current time",
        "func": "var data_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Current_time\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x06, 0x01]);\n        msg_ser_out.topic = \"Current_time\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        data_msg.payload = msg.payload;\n        data_msg.topic = \"current_time\"\n        return [data_msg, null];\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 558,
        "wires": [
            [
                "ba217d93.e8bf3"
            ],
            [
                "35808314.d50abc"
            ]
        ]
    },
    {
        "id": "ffdbf263.3b749",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "text_time",
        "label": "Inverter Zeit: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1034,
        "y": 549,
        "wires": []
    },
    {
        "id": "ba217d93.e8bf3",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "print current time",
        "func": "function pad(n) {\n    if (n<10) // do zero padding\n    {\n        var str = \"0\" + n.toString();\n        return str;\n    }\n    else\n    {\n        return n.toString();\n    }\n}\n\nif (msg.topic === \"current_time\") // should be always the case\n{\n    var buffer = msg.payload;\n    year = 2000 + buffer[0];\n    month = buffer[1];\n    day = buffer[2];\n    hour = buffer[3];\n    minute = buffer[4];\n    var text = pad(day) + \".\" + pad(month) + \".\" + year + \", \" + hour + \":\"+ pad(minute);\n    msg = {payload: text};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 796,
        "y": 555,
        "wires": [
            [
                "ffdbf263.3b749"
            ]
        ]
    },
    {
        "id": "5166de32.30332",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "Current_time",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "45",
        "crontab": "",
        "once": false,
        "x": 289,
        "y": 557,
        "wires": [
            [
                "72393470.15568c"
            ]
        ]
    },
    {
        "id": "f312a892.6c33c8",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "overall_kWh",
        "label": "Gesamtertrag: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1314,
        "y": 892,
        "wires": []
    },
    {
        "id": "b7ce5011.82528",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "day_kWh",
        "label": "Tagesertrag: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1292,
        "y": 849,
        "wires": []
    },
    {
        "id": "23447cc9.94a824",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "every_minute",
        "topic": "sleep",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 295,
        "y": 339,
        "wires": [
            [
                "8e8e67e2.3b3cb8"
            ]
        ]
    },
    {
        "id": "a054aa2a.485928",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "timeConvert",
        "func": "if ( !msg.timestamp ) msg.timestamp = Math.round(+new Date());\n\nvar dt = new Date(msg.timestamp);\nvar msg = {\n\t'month':\tdt.getMonth() + 1,\n\t'day':\t\tdt.getDate(),\n\t'year':\t\tdt.getFullYear(), \n\t'hours':\tdt.getHours(),\n\t'mins':\t\tdt.getMinutes(),\n\t'secs':\tdt.getSeconds()\n}\nmsg.topic = \"DateTime\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 392,
        "y": 275.99996185302734,
        "wires": [
            [
                "7f39498f.0bd038"
            ]
        ]
    },
    {
        "id": "60dfe5b8.38ebac",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "set_time (Noon)",
        "topic": "set_time",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "x": 175.9999771118164,
        "y": 272.999963760376,
        "wires": [
            [
                "a054aa2a.485928"
            ]
        ]
    },
    {
        "id": "8e8e67e2.3b3cb8",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Inverter sleeps?",
        "func": "var state_msg = {payload:\"\"};\n// initialise the topic to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n\nif (msg.topic !== \"sleep\" )  // all topic relevant, instead of sleep\n{\n    count = 0;\n}\nelse // reset trigger comes in\n{\n    count += 1;\n}\ncontext.set('count', count);\nif (count > 1)\n{\n    state_msg.payload = \"schläft\";\n}\nelse \n{\n    state_msg.payload = \"ist wach\";\n}\nreturn state_msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 553,
        "y": 338,
        "wires": [
            [
                "77cfd8ac.619578"
            ]
        ]
    },
    {
        "id": "77cfd8ac.619578",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wechselrichter ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1103,
        "y": 338,
        "wires": []
    },
    {
        "id": "c7a2ec36.3ad84",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "plot online data",
        "func": "function energy_correction(orig){\n    orig = 1.039162 * orig - 744.8984;\n    return orig;\n}\n\nif (msg.topic === \"pac\") // ac Power\n{\n    return [msg, null, null, null];\n}\nelse if (msg.topic === \"wd\") // day Wh\n{\n    var wd = msg.payload;\n    wd = 1.039162 * wd;\n    wd = Math.round(wd*100)/100;\n    msg.payload = \"\"+ wd + \" kWh\";\n    return [null, msg, null, null];\n}\nelse if (msg.topic === \"wtot\")\n{\n    var wtot = msg.payload;\n    wtot = energy_correction(wtot);\n    wtot = Math.round(wtot);\n    msg.payload = \"\"+ wtot + \" kWh\";\n    return [null, null, msg, null];\n}\nelse if (msg.topic === \"error\")\n{\n    var error = msg.payload;\n    var text = \"\";\n    if ((error === 0) || (error === 128))\n    {\n        text = \"keinen Fehler\";\n    }\n    else\n    {\n        text = error;\n    }\n    msg = {payload: text};\n    return [null, null, null, msg];\n}",
        "outputs": "4",
        "noerr": 0,
        "x": 1082,
        "y": 830,
        "wires": [
            [
                "45b89d04.9cb384"
            ],
            [
                "b7ce5011.82528"
            ],
            [
                "f312a892.6c33c8"
            ],
            [
                "a54aadd2.bca1"
            ]
        ]
    },
    {
        "id": "49e0410a.01835",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "Failure_memory",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 303,
        "y": 423.9999761581421,
        "wires": [
            [
                "3407f58c.60f5ca"
            ]
        ]
    },
    {
        "id": "3407f58c.60f5ca",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Process failure memory",
        "func": "//var data_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n// initialise the data_msg with \"\" if it doesn't exist already\nvar data_msg = context.get('data_msg')||{payload:\"\"};\n\nvar failure_cmd = Buffer([0x00, 0x01, 0x01]);\n\nif (msg.topic === \"Failure_memory\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        count = 0x01;\n        var BN = Buffer([count]);                    // Block number\n        msg_ser_out.payload = Buffer.concat([failure_cmd, BN], (failure_cmd.length + 1));\n        msg_ser_out.topic = \"Failure_memory\";\n        \n        data_msg.payload = new Array(50);\n        context.set('data_msg', data_msg);\n        context.set('count', count);\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        if (count < 0x32) // write failure_cmd\n        {\n            data_msg.payload[count-1] = msg.payload;\n            data_msg.topic = \"failure_memory\";\n            context.set('data_msg', data_msg);\n            \n            count +=1;\n            context.set('count', count);\n            var BN = Buffer([count]);                    // Block number\n            msg_ser_out.payload = Buffer.concat([failure_cmd, BN], (failure_cmd.length + 1));\n            msg_ser_out.topic = \"Failure_memory\";\n            \n            \n            return [null, msg_ser_out];\n        }\n        else  // send last data out\n        {\n            data_msg.payload[count-1] = msg.payload;\n            data_msg.topic = \"failure_memory\";\n            return [data_msg, null];\n        }\n        \n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 578.9999694824219,
        "y": 427.999981880188,
        "wires": [
            [
                "538c7c4e.c68bf4",
                "12c9add8.240832"
            ],
            [
                "35808314.d50abc"
            ]
        ]
    },
    {
        "id": "6decf517.59f7ec",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "database_input",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1202,
        "y": 405,
        "wires": []
    },
    {
        "id": "12c9add8.240832",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "write failure data",
        "func": "function pad(n) {\n    if (n<10) // do zero padding\n    {\n        var str = \"0\" + n.toString();\n        return str;\n    }\n    else\n    {\n        return n.toString();\n    }\n}\n\nfunction check_up_to_dateness(failure_entry, db_entry)\n{\n    var i;\n    var up_to_date;\n    var cnt = 5\n    for (i = 0; i < db_entry.length; i++)\n    {\n        if (failure_entry[i] > db_entry[i])\n        {\n            up_to_date = 1;\n            break;\n        }\n        else if (failure_entry[i] == db_entry[i])\n        {\n            up_to_date = 0; // if everything is equal it's not new\n        }\n        else // failure_entry[i] < db_entry[i]\n        {\n            up_to_date = 0;\n            break;\n        }\n    }\n    return up_to_date;\n}\n\n\nif (msg.topic === \"failure_memory\")\n{\n    // read data in\n    var data = msg.payload;\n    \n    context.set('data', data);\n    \n    // send query to mysql database to get last element\n    var query_msg = {topic: \"\"};\n    query_msg.topic = \"SELECT * FROM Fehlerspeicher ORDER BY ID DESC LIMIT 1\";\n\n    return [query_msg, null];\n    \n\n    \n}\nelse if (msg.topic.substr(0,6) == \"SELECT\")// get last line from database and write new data into database\n{\n    // get data from database\n    var last_entry = msg.payload[0];\n    var date_str = last_entry.Zeit;\n    var date_time = date_str.split(\",\");\n    var date = date_time[0].split(\"-\");\n    var time = date_time[1].split(\":\");\n    var failurecode = last_entry.Fehlercode;\n    var db_entry = [parseInt(date[0]), parseInt(date[1]), parseInt(date[2]), parseInt(time[0]), parseInt(time[1])];\n    \n    var data = context.get('data');\n    var i;\n    len = data.length;\n    for (i = len-1; i >= 0; i--)\n    {\n        var buffer = data[i];\n        \n        // convert older data\n        var month = buffer[6];\n        var day = buffer[7];\n        var hour = buffer[8];\n        var minute = buffer[9];\n        var code = buffer[10];\n        var year = 2000 + buffer[11];  \n        var failure_entry = [year, month, day, hour, minute];\n        var up_to_date = check_up_to_dateness(failure_entry, db_entry);\n        \n        if (up_to_date)\n        {\n            var timestring = \"\" + year + \"-\" + pad(month) + \"-\" + pad(day) + \",\" + pad(hour) + \":\" + pad(minute);\n            var data_string = \"'\" + timestring + \"', '\" + code + \"'\";\n            var db_msg = {topic: \"\"};\n            db_msg.topic = \"INSERT INTO `Fehlerspeicher` (`Zeit`, `Fehlercode`) VALUES (\" + data_string + \")\";\n            db_msg.payload = failure_entry;\n            \n            node.send([null,db_msg]);\n        }\n        \n        // convert newer data\n        var month = buffer[0];\n        var day = buffer[1];\n        var hour = buffer[2];\n        var minute = buffer[3];\n        var code = buffer[4];\n        var year = 2000 + buffer[5];  \n        var failure_entry = [year, month, day, hour, minute];\n        var up_to_date = check_up_to_dateness(failure_entry, db_entry);\n        \n        if (up_to_date)\n        {\n            var timestring = \"\" + year + \"-\" + pad(month) + \"-\" + pad(day) + \",\" + pad(hour) + \":\" + pad(minute);\n            var data_string = \"'\" + timestring + \"', '\" + code + \"'\";\n            var db_msg = {topic: \"\"};\n            db_msg.topic = \"INSERT INTO `Fehlerspeicher` (`Zeit`, `Fehlercode`) VALUES (\" + data_string + \")\";\n            db_msg.payload = failure_entry;\n            node.send([null,db_msg]);\n        }\n        \n    }\n}\nelse // feedback from database insert\n{\n    \n}\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 913.0000114440918,
        "y": 430.9999713897705,
        "wires": [
            [
                "6decf517.59f7ec",
                "5f9d1092.95474"
            ],
            [
                "6decf517.59f7ec",
                "5f9d1092.95474"
            ]
        ]
    },
    {
        "id": "5f9d1092.95474",
        "type": "mysql",
        "z": "46efba90.c91554",
        "mydb": "a1a56ac3.5e8868",
        "name": "Datenbank",
        "x": 1132,
        "y": 469,
        "wires": [
            [
                "96104994.a901c8",
                "12c9add8.240832"
            ]
        ]
    },
    {
        "id": "96104994.a901c8",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "database_output",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1253.9999809265137,
        "y": 533.9999780654907,
        "wires": []
    },
    {
        "id": "62297c74.f920a4",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "chart_out",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1469.9998531341553,
        "y": 801.9999694824219,
        "wires": []
    },
    {
        "id": "a54aadd2.bca1",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "d6509987.c55068",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Fehler",
        "label": "Wechselrichter hat: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1288,
        "y": 935,
        "wires": []
    },
    {
        "id": "86febc85.78f62",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1081,
        "y": 959,
        "wires": []
    },
    {
        "id": "f8d185b0.746578",
        "type": "mysql",
        "z": "46efba90.c91554",
        "mydb": "a1a56ac3.5e8868",
        "name": "Datenbank",
        "x": 675,
        "y": 1222,
        "wires": [
            [
                "17288900.03bb47",
                "3e89f8e.8de7b08"
            ]
        ]
    },
    {
        "id": "90a479c3.6dff18",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "",
        "func": "msg.topic = \"SELECT * FROM Fehlerspeicher WHERE STR_TO_DATE(Zeit, '%Y-%m-%d,%H:%i') BETWEEN '2016-02-01 00:00:00' AND '2016-03-02 00:00:00'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 456,
        "y": 1222,
        "wires": [
            [
                "f8d185b0.746578",
                "17288900.03bb47"
            ]
        ]
    },
    {
        "id": "17288900.03bb47",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 859,
        "y": 1311,
        "wires": []
    },
    {
        "id": "6a10c5d0.b88aac",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 269,
        "y": 1220,
        "wires": [
            [
                "90a479c3.6dff18"
            ]
        ]
    },
    {
        "id": "ca378cdd.8b019",
        "type": "ui_button",
        "z": "b9ee919e.468a1",
        "name": "",
        "group": "6c6668c7.c4f718",
        "order": 2,
        "width": "2",
        "height": "1",
        "label": "Inject",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 362,
        "y": 269,
        "wires": [
            [
                "881072f0.c7d9e"
            ]
        ]
    },
    {
        "id": "f0950f24.9d8ce",
        "type": "ui_button",
        "z": "b9ee919e.468a1",
        "name": "",
        "group": "6c6668c7.c4f718",
        "order": 4,
        "width": "2",
        "height": "1",
        "label": "restore",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 342,
        "y": 568,
        "wires": [
            [
                "1ac5d289.d72b0d"
            ]
        ]
    },
    {
        "id": "881072f0.c7d9e",
        "type": "random",
        "z": "b9ee919e.468a1",
        "name": "",
        "low": "0",
        "high": "10",
        "inte": "true",
        "x": 512,
        "y": 269,
        "wires": [
            [
                "d4778ee.044d17"
            ]
        ]
    },
    {
        "id": "d4778ee.044d17",
        "type": "ui_chart",
        "z": "b9ee919e.468a1",
        "name": "",
        "group": "6c6668c7.c4f718",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "15",
        "removeOlderPoints": "100",
        "removeOlderUnit": "60",
        "cutout": 0,
        "x": 662,
        "y": 269,
        "wires": [
            [
                "62177ea7.e168a"
            ],
            []
        ]
    },
    {
        "id": "737321ec.1ce46",
        "type": "file",
        "z": "b9ee919e.468a1",
        "name": "",
        "filename": "/tmp/chart.log",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 812,
        "y": 429,
        "wires": []
    },
    {
        "id": "1ac5d289.d72b0d",
        "type": "file in",
        "z": "b9ee919e.468a1",
        "name": "",
        "filename": "/tmp/chart.log",
        "format": "utf8",
        "x": 512,
        "y": 569,
        "wires": [
            [
                "71ad96b0.e81c18",
                "af535f7f.d404b"
            ]
        ]
    },
    {
        "id": "62177ea7.e168a",
        "type": "json",
        "z": "b9ee919e.468a1",
        "name": "",
        "x": 799,
        "y": 263,
        "wires": [
            [
                "f410d872.b08f48"
            ]
        ]
    },
    {
        "id": "71ad96b0.e81c18",
        "type": "json",
        "z": "b9ee919e.468a1",
        "name": "",
        "x": 662,
        "y": 569,
        "wires": [
            [
                "d4778ee.044d17",
                "af535f7f.d404b"
            ]
        ]
    },
    {
        "id": "f410d872.b08f48",
        "type": "function",
        "z": "b9ee919e.468a1",
        "name": "",
        "func": "if (msg.topic === \"save\") {\n    msg.payload = context.last;\n    return msg;\n}\nelse {\n    context.last = msg.payload;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 542,
        "y": 429,
        "wires": [
            [
                "737321ec.1ce46",
                "af535f7f.d404b"
            ]
        ]
    },
    {
        "id": "e30ab33d.677fd",
        "type": "ui_button",
        "z": "b9ee919e.468a1",
        "name": "",
        "group": "6c6668c7.c4f718",
        "order": 3,
        "width": "2",
        "height": "1",
        "label": "save",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "save",
        "x": 362,
        "y": 429,
        "wires": [
            [
                "f410d872.b08f48"
            ]
        ]
    },
    {
        "id": "af535f7f.d404b",
        "type": "debug",
        "z": "b9ee919e.468a1",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 822,
        "y": 489,
        "wires": []
    },
    {
        "id": "3e89f8e.8de7b08",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "",
        "func": "var test = msg.payload[0]['Zeit'];\nvar length = msg.payload.length;\nvar array = Array(length);\nfor (var i = 0; i<length; i++)\n{\n    var timestamp = msg.payload[i]['Zeitstempel']\n    var zeit = msg.payload[i]['Zeit'];\n    //array[i] = Date(zeit).getTime();\n    var code = msg.payload[i]['Fehlercode'];\n    array[i] = [Date.parse(timestamp), Date.parse(zeit), code];\n}\nvar msg = {payload: array};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 1224,
        "wires": [
            [
                "17288900.03bb47"
            ]
        ]
    },
    {
        "id": "10f9aa83.65db65",
        "type": "mysql",
        "z": "46efba90.c91554",
        "mydb": "a1a56ac3.5e8868",
        "name": "Datenbank",
        "x": 708,
        "y": 1453,
        "wires": [
            [
                "ad930dc9.01b21",
                "862a976c.9bbb58"
            ]
        ]
    },
    {
        "id": "e1ec37a0.0187d8",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Select from DB",
        "func": "var day_start = msg.day_choosed.substring(0,10) + \" 00:00:00\"\nvar day_end =  msg.day_choosed.substring(0,10) + \" 23:59:00\"\n\nmsg.topic = \"SELECT * \" +\n        \"FROM Online_data_overall \" +\n        \"WHERE STR_TO_DATE(Zeitstempel, '%Y-%m-%d %H:%i:%s') \" + \n        \"BETWEEN '\" + day_start + \"' AND '\" + day_end + \"'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 518,
        "y": 1448,
        "wires": [
            [
                "10f9aa83.65db65",
                "ad930dc9.01b21"
            ]
        ]
    },
    {
        "id": "ad930dc9.01b21",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1102,
        "y": 1718,
        "wires": []
    },
    {
        "id": "862a976c.9bbb58",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Filter data",
        "func": "var length = msg.payload.length;\nvar array = Array(length);\nvar day_kWh = 0;\n// get Timezone offset \nvar offset = new Date().getTimezoneOffset(); // in minutes\nfor (var i = 0; i<length; i++)\n{\n    var timestamp = msg.payload[i]['Zeitstempel']\n    var pac = msg.payload[i]['P_ac'];\n    array[i] = [Date.parse(timestamp) + offset*60000, pac];\n    \n    // maximum of Tagesertrag\n    var aux = msg.payload[i]['Tagesertrag'];\n    if (aux >= day_kWh)\n    {\n        day_kWh = aux;\n    }\n}\n// correct energy\nday_kWh = 1.0374*day_kWh;\nday_kWh = Math.round(day_kWh*100)/100;\n\nvar msg = {payload: array};\nvar msg_kWh = {payload: \"\" + day_kWh + \" kWh\"};\nreturn [msg_kWh, msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 904,
        "y": 1468,
        "wires": [
            [
                "8baea022.416f9",
                "8b2feeec.7f34c"
            ],
            [
                "72d74aca.fa40f4"
            ]
        ]
    },
    {
        "id": "72d74aca.fa40f4",
        "type": "json",
        "z": "46efba90.c91554",
        "name": "",
        "x": 966,
        "y": 1526,
        "wires": [
            [
                "81fc211a.1c3d1"
            ]
        ]
    },
    {
        "id": "81fc211a.1c3d1",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "add cmd for chart",
        "func": "msg.payload = \"[{\\\"key\\\":\\\"P_ac\\\",\\\"values\\\":\" + msg.payload + \"}]\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1063,
        "y": 1594,
        "wires": [
            [
                "1aa1abeb.94b264"
            ]
        ]
    },
    {
        "id": "1aa1abeb.94b264",
        "type": "json",
        "z": "46efba90.c91554",
        "name": "",
        "x": 1033,
        "y": 1662,
        "wires": [
            [
                "ad930dc9.01b21",
                "4c24ac77.da34d4"
            ]
        ]
    },
    {
        "id": "4c24ac77.da34d4",
        "type": "ui_chart",
        "z": "46efba90.c91554",
        "name": "plot_database",
        "group": "88e35b00.a73af8",
        "order": 6,
        "width": "18",
        "height": "7",
        "label": "Datenbank",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "keine Daten verfügbar :(",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": true,
        "x": 1204,
        "y": 1655,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "34d82408.18347c",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "set day",
        "func": "function pad(n) {\n    if (n<10) // do zero padding\n    {\n        var str = \"0\" + n.toString();\n        return str;\n    }\n    else\n    {\n        return n.toString();\n    }\n}\n\n// initialise the day_choosed to actual date if it doesn't exist already\nvar day_choosed = context.get('day_choosed')||new Date(); // \n\n\nif (msg.topic == \"today\")\n{\n    day_choosed = new Date();\n    context.set('day_choosed', day_choosed);\n}\nelse if (msg.topic == \"yesterday\")\n{\n    day_choosed = new Date();\n    day_choosed.setDate(day_choosed.getDate() - 1);\n    context.set('day_choosed', day_choosed);\n}\nelse if (msg.topic == \"day_before\")\n{\n    day_choosed.setDate(day_choosed.getDate() - 1);\n    context.set('day_choosed', day_choosed);\n}\nelse if (msg.topic == \"day_after\")\n{\n    day_choosed.setDate(day_choosed.getDate() + 1);\n    if (day_choosed > new Date())\n    {\n        day_choosed = new Date();\n    }\n    context.set('day_choosed', day_choosed);\n}\nelse if (msg.topic == 'calendar')\n{\n    day_choosed = new Date(msg.payload);\n    if (day_choosed > new Date())\n    {\n        day_choosed = new Date();\n    }\n    context.set('day_choosed', day_choosed);\n}\n\n// convert into calendar time\nvar day_string = day_choosed.getFullYear() + \"-\" + \n                pad(day_choosed.getMonth() + 1) + \"-\" + \n                pad(day_choosed.getDate());\n\n\n//msg.payload = day_string;\n// make it part of the outgoing msg object\nmsg.day_choosed = day_string;\nmsg.payload = day_choosed;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 328,
        "y": 1471,
        "wires": [
            [
                "37e1a067.1a639",
                "e1ec37a0.0187d8",
                "9a469f6c.87034",
                "b9ad2d45.36fb8"
            ]
        ]
    },
    {
        "id": "37e1a067.1a639",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 633,
        "y": 1610,
        "wires": []
    },
    {
        "id": "feab3401.75e7b8",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "today",
        "topic": "today",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 141,
        "y": 1383,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "d0e441e4.40ae9",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "day_before",
        "topic": "day_before",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 145,
        "y": 1478,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "6334191b.d29a18",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "day_after",
        "topic": "day_after",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 144,
        "y": 1571,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "534b6e83.9864c",
        "type": "ui_button",
        "z": "46efba90.c91554",
        "name": "today",
        "group": "88e35b00.a73af8",
        "order": 2,
        "width": "2",
        "height": "1",
        "label": "Heute",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "today",
        "x": 133,
        "y": 1423,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "6035e4e5.2caf1c",
        "type": "ui_button",
        "z": "46efba90.c91554",
        "name": "day_before",
        "group": "88e35b00.a73af8",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Tag davor",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "day_before",
        "x": 154,
        "y": 1520,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "d076c09.dcb414",
        "type": "ui_button",
        "z": "46efba90.c91554",
        "name": "day_after",
        "group": "88e35b00.a73af8",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Tag danach",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "day_after",
        "x": 138,
        "y": 1625,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "df691860.afc6c8",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "midnight",
        "topic": "yesterday",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "x": 145,
        "y": 1333,
        "wires": [
            [
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "9a469f6c.87034",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "88e35b00.a73af8",
        "order": 4,
        "width": "10",
        "height": "1",
        "name": "Datum",
        "label": "Datum: ",
        "format": "{{msg.day_choosed}}",
        "layout": "row-left",
        "x": 553,
        "y": 1515,
        "wires": []
    },
    {
        "id": "8baea022.416f9",
        "type": "ui_text",
        "z": "46efba90.c91554",
        "group": "88e35b00.a73af8",
        "order": 5,
        "width": "10",
        "height": "1",
        "name": "day_choosed_kWh",
        "label": "Tagesertrag: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1252,
        "y": 1462,
        "wires": []
    },
    {
        "id": "8b2feeec.7f34c",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1135,
        "y": 1511,
        "wires": []
    },
    {
        "id": "9f862cdf.74b3d",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "Set_inverter_time",
        "topic": "set_time",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 264.7926330566406,
        "y": 186.70737552642822,
        "wires": [
            [
                "a054aa2a.485928"
            ]
        ]
    },
    {
        "id": "538c7c4e.c68bf4",
        "type": "debug",
        "z": "46efba90.c91554",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 931.7840270996094,
        "y": 382.78407764434814,
        "wires": []
    },
    {
        "id": "7f39498f.0bd038",
        "type": "function",
        "z": "46efba90.c91554",
        "name": "Set inverter time",
        "func": "var msg1_ser_out = {payload:\"\"};\nvar msg2_ser_out = {payload:\"\"};\nvar msg3_ser_out = {payload:\"\"};\nvar msg4_ser_out = {payload:\"\"};\nvar msg5_ser_out = {payload:\"\"};\n\nvar set_year_cmd = Buffer([0x00, 0xFF, 0x32]);\nvar set_month_cmd = Buffer([0x00, 0xFF, 0x33]);\nvar set_day_cmd = Buffer([0x00, 0xFF, 0x34]);\nvar set_hour_cmd = Buffer([0x00, 0xFF, 0x35]);\nvar set_min_cmd = Buffer([0x00, 0xFF, 0x36]);\n\nif (msg.topic === \"DateTime\" )  // Relevant for this function\n{\n    var year = Buffer([msg.year - 2000]); \n    msg1_ser_out.payload = Buffer.concat([set_year_cmd, year], 4);\n    msg1_ser_out.topic = \"set_year\";\n    \n    var month = Buffer([msg.month]); \n    msg2_ser_out.payload = Buffer.concat([set_month_cmd, month], 4);\n    msg2_ser_out.topic = \"set_month\";\n    \n    var day = Buffer([msg.day]); \n    msg3_ser_out.payload = Buffer.concat([set_day_cmd, day], 4);\n    msg3_ser_out.topic = \"set_day\";\n    \n    var hour = Buffer([msg.hours + 1]); \n    msg4_ser_out.payload = Buffer.concat([set_hour_cmd, hour], 4);\n    msg4_ser_out.topic = \"set_hour\";\n    \n    var min = Buffer([msg.mins + 1]); \n    msg5_ser_out.payload = Buffer.concat([set_min_cmd, min], 4);\n    msg5_ser_out.topic = \"set_min\";\n    \n    return [[msg1_ser_out, msg2_ser_out, msg3_ser_out], [msg4_ser_out, msg5_ser_out]];\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 581.650520324707,
        "y": 276.00559425354004,
        "wires": [
            [
                "9aceb51f.0a9fc8"
            ],
            [
                "9aceb51f.0a9fc8"
            ]
        ]
    },
    {
        "id": "9aceb51f.0a9fc8",
        "type": "delay",
        "z": "46efba90.c91554",
        "name": "Queue",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 760.6504745483398,
        "y": 274.00559425354004,
        "wires": [
            [
                "35808314.d50abc"
            ]
        ]
    },
    {
        "id": "b9ad2d45.36fb8",
        "type": "ui_date_picker",
        "z": "46efba90.c91554",
        "name": "calendar",
        "label": "Kalender",
        "group": "88e35b00.a73af8",
        "order": 0,
        "width": "3",
        "height": "1",
        "passthru": false,
        "topic": "calendar",
        "x": 140.42039489746094,
        "y": 1676.8264560699463,
        "wires": [
            [
                "37e1a067.1a639",
                "34d82408.18347c"
            ]
        ]
    },
    {
        "id": "d01fa69.0824d58",
        "type": "inject",
        "z": "46efba90.c91554",
        "name": "set_time (Noon + 5min)",
        "topic": "set_time",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "05 12 * * *",
        "once": false,
        "x": 298.0142059326172,
        "y": 466.91475200653076,
        "wires": [
            [
                "3407f58c.60f5ca"
            ]
        ]
    }
]
