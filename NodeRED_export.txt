[
    {
        "id": "ef2e3d60.bc774",
        "type": "tab",
        "label": "Flow 1"
    },
    {
        "id": "11a2825f.b962ae",
        "type": "tab",
        "label": "Flow 2"
    },
    {
        "id": "fa65c39b.2b42b",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "bin",
        "out": "char",
        "addchar": false
    },
    {
        "id": "ff3a9e64.3083",
        "type": "ui_group",
        "z": "",
        "name": "Wechselrichter Info",
        "tab": "2b8369e6.0695e6",
        "disp": true,
        "width": "5"
    },
    {
        "id": "2b8369e6.0695e6",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "90a05255.d8e8c",
        "type": "ui_base",
        "name": "Node-RED Dashboard",
        "theme": "theme-light"
    },
    {
        "id": "448c7b52.637e04",
        "type": "MySQLdatabase",
        "z": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Photovoltaik_Daten",
        "tz": "UTC+1"
    },
    {
        "id": "9129120a.2c62e",
        "type": "ui_tab",
        "z": "",
        "name": "Database",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "a6b16e9c.62964",
        "type": "ui_group",
        "z": "",
        "name": "aktuelle Daten",
        "tab": "2b8369e6.0695e6",
        "order": 2,
        "disp": true,
        "width": "18"
    },
    {
        "id": "29478cd0.7837c4",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "13",
        "bin": "bin",
        "out": "count",
        "addchar": false
    },
    {
        "id": "2bc16ee4.a39152",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": false
    },
    {
        "id": "b24110fa.4b1fb",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "500",
        "bin": "bin",
        "out": "time",
        "addchar": false
    },
    {
        "id": "bcfada5d.3f5ef8",
        "type": "ui_button",
        "z": "ef2e3d60.bc774",
        "name": "get_serial",
        "group": "ff3a9e64.3083",
        "order": 1,
        "width": "3",
        "height": "1",
        "label": "Seriennummer?",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Serial_number",
        "x": 309,
        "y": 611,
        "wires": [
            [
                "351b3901.6902e6"
            ]
        ]
    },
    {
        "id": "44832dfb.4f0f04",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "text_serial",
        "label": "Seriennummer: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 1026,
        "y": 616,
        "wires": []
    },
    {
        "id": "fc40db3d.e0dd08",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "Online_data",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 304,
        "y": 727,
        "wires": [
            [
                "e992325e.c0c1"
            ]
        ]
    },
    {
        "id": "6e6e45f6.edeebc",
        "type": "serial out",
        "z": "ef2e3d60.bc774",
        "name": "serial",
        "serial": "2bc16ee4.a39152",
        "x": 824,
        "y": 1001,
        "wires": []
    },
    {
        "id": "946aa7c7.c41ed8",
        "type": "serial in",
        "z": "ef2e3d60.bc774",
        "name": "serial",
        "serial": "2bc16ee4.a39152",
        "x": 422,
        "y": 1019,
        "wires": [
            [
                "b9b76688.542f78",
                "70621311.470c0c"
            ]
        ]
    },
    {
        "id": "da6c823f.5dee1",
        "type": "inject",
        "z": "11a2825f.b962ae",
        "name": "Force",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 358,
        "y": 345,
        "wires": [
            [
                "fe7895ae.ae1b88"
            ]
        ]
    },
    {
        "id": "c6793ffe.9c516",
        "type": "debug",
        "z": "11a2825f.b962ae",
        "name": "output",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 950,
        "y": 273,
        "wires": []
    },
    {
        "id": "5a8f70dd.76657",
        "type": "function",
        "z": "11a2825f.b962ae",
        "name": "timeConvert",
        "func": "if ( !msg.timestamp ) msg.timestamp = Math.round(+new Date());\n\nvar dt = new Date(msg.timestamp);\nvar msg = {\n\t'month':\tdt.getMonth() + 1,\n\t'day':\t\tdt.getDate(),\n\t'year':\t\tdt.getFullYear(),\n\t'hours':\tdt.getHours(),\n\t'mins':\t\tdt.getMinutes(),\n\t'secs':\tdt.getSeconds()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 754,
        "y": 273,
        "wires": [
            [
                "c6793ffe.9c516"
            ]
        ]
    },
    {
        "id": "fe7895ae.ae1b88",
        "type": "function",
        "z": "11a2825f.b962ae",
        "name": "set timestamp",
        "func": "msg.timestamp=1376763133 * 1000;\nreturn msg;",
        "outputs": 1,
        "x": 542,
        "y": 345,
        "wires": [
            [
                "5a8f70dd.76657"
            ]
        ]
    },
    {
        "id": "1036b4d.487fd4b",
        "type": "inject",
        "z": "11a2825f.b962ae",
        "name": "Force",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 358,
        "y": 273,
        "wires": [
            [
                "5a8f70dd.76657"
            ]
        ]
    },
    {
        "id": "299849ba.f042d6",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "serial_out",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 823,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ae9cbce4.48f2a",
        "type": "ui_chart",
        "z": "ef2e3d60.bc774",
        "name": "",
        "group": "a6b16e9c.62964",
        "order": 2,
        "width": "18",
        "height": "6",
        "label": "Leistungskurve [kW]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "keine Daten verf√ºgbar :(",
        "ymin": "",
        "ymax": "",
        "removeOlder": "14",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "x": 1284,
        "y": 804,
        "wires": [
            [
                "602ab448.53981c"
            ],
            [
                "602ab448.53981c"
            ]
        ]
    },
    {
        "id": "e992325e.c0c1",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "Process Online data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n// make it part of the outgoing msg object\nmsg.count = count;\n\n// states: 0 = none, 2 = online, 3 = monthly, 4 = yearly\n\n\nvar db_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Online_data\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        count = 1;\n        context.set('count', count);\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x01, 0x04]);\n        msg_ser_out.topic = \"Online_data\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        msg_ser_out.topic = \"Online_data\";\n        if (count === 1)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data1\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x02, 0x05]);\n            count +=1;\n        }\n        else if (count === 2)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data2\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0x03, 0x06]);\n            count +=1;\n        }\n        else if (count === 3)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data3\";\n            msg_ser_out.payload = Buffer([0x00, 0x01, 0x02, 0xff, 0x02]);\n            count +=1;\n        }\n        else if (count === 4)\n        {\n            db_msg.payload = msg.payload;\n            db_msg.topic = \"Online_data_overall\";\n            count = 0;\n            return [db_msg, null];\n        }\n        else // should not occur\n        {\n            // do nothing\n        }\n        context.set('count', count);\n        \n        // if received data is not the last one\n        return [db_msg, msg_ser_out];\n\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 553,
        "y": 765,
        "wires": [
            [
                "6d7ed880.690528"
            ],
            [
                "6d34ac42.85fa94"
            ]
        ]
    },
    {
        "id": "6d7ed880.690528",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "write online data",
        "func": "if (msg.topic === \"Online_data1\" || msg.topic === \"Online_data2\" || msg.topic === \"Online_data3\")\n{\n    var buffer = msg.payload;\n    // convert data\n    var udc = buffer[0] * 2.8 + 200;\n    var idc = buffer[1] * 0.08;\n    var uac = buffer[2] + 100;\n    var iac = buffer[3] * 0.12;\n    var temp = buffer[4] - 40;  // Temperature\n    var s = buffer[5] * 6;      // radiation\n    var pdc = udc * idc;\n    var pac = uac * iac;\n    var wd = (buffer[6] * 256 + buffer[7]) *10 / 1000; // Tagesertrag kWh\n    var aux = buffer[11] & 0xC5;\n    var overflow = aux>>6 | (aux&4)<<1 | (aux&1)<<2;\n    var wtot = overflow * 65536 + buffer[8] * 256 + buffer[9];     // Gesamtertrag kWh\n    var error = buffer[10];\n    var data_string = \"'\" + udc + \"', '\" + idc + \"', '\" + uac + \"', '\" + iac + \"', '\" + pdc + \"', '\" + pac + \"', '\" + wd + \"', '\" + wtot + \"', '\" + error + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `\" + msg.topic + \"`(`U_dc`, `I_dc`, `U_ac`, `I_ac`, `P_dc`, `P_ac`, `Tagesertrag`, `Gesamtertrag`, `Fehlercode`) VALUES (\" + data_string + \")\";\n\n    return [db_msg, null];\n}\nelse if (msg.topic === \"Online_data_overall\")\n{\n    var buffer = msg.payload;\n    // convert data\n    var pdc = (buffer[0] * 256 + buffer[1])/1000;   // kW\n    var pac = (buffer[2] * 256 + buffer[3])/1000;   // kW\n    var temp = 0;\n    var radi = 0;\n    if (buffer[4] === 1) // no temperature sensor\n    {\n        temp = -40;\n    }\n    else \n    {\n        temp = buffer[4] - 40; // ¬∞C\n    }\n    if (buffer[5] === 1) // no radiation sensor\n    {\n        radi = 0;\n    }\n    else \n    {\n        radi = buffer[5] * 6;   // W/m^2\n    }\n    var wd = (buffer[6] * 256 + buffer[7]) * 10 / 1000; // Tagesertrag kWh\n    var aux = buffer[11] & 0xC5;\n    var overflow = aux>>6 | (aux&4)<<1 | (aux&1)<<2;\n    var wtot = overflow * 65536 + buffer[8] * 256 + buffer[9];     // Gesamtertrag kWh\n    var error = buffer[10];\n    // create database msg\n    var data_string = \"'\" + pdc + \"', '\" + pac + \"', '\" + temp + \"', '\" + radi + \"', '\" + wd + \"', '\" + wtot + \"', '\" + error + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `\" + msg.topic + \"`(`P_dc`, `P_ac`, `Temperatur`, `Radiation`, `Tagesertrag`, `Gesamtertrag`, `Fehlercode`) VALUES (\" + data_string + \")\";\n    \n    \n    var plot_pac = {payload: pac};\n    plot_pac.topic = \"pac\";\n    var print_wd = {payload: \"\"+ wd + \" kWh\"};\n    print_wd.topic = \"wd\";\n    var print_wtot = {payload: \"\" + wtot + \" kWh\"};\n    print_wtot.topic = \"wtot\";\n    var print_error = {payload: error};\n    print_error.topic = \"error\";\n    return [db_msg, [plot_pac, print_wd, print_wtot, print_error]];\n}\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 837,
        "y": 760,
        "wires": [
            [
                "dcf6b56c.1093a8",
                "56e97ec.933438"
            ],
            [
                "b37b552f.a301d8",
                "e9b7653c.88cd98"
            ]
        ]
    },
    {
        "id": "dcf6b56c.1093a8",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "database_input",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1220,
        "y": 756,
        "wires": []
    },
    {
        "id": "b9b76688.542f78",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "ser_com",
        "func": "// manages serial communication\n// checks letgth of command and add checksum if needed\n// checks checksum of incoming data\n\n// initialise the topic to 0 if it doesn't exist already\nvar topic = context.get('topic')||0;\n\nfunction calculate_CS(buffer) {\n  CS = 0;\n  for (var i = 0; i<buffer.length; i++)\n  {\n      CS += buffer[i];\n  }\n  CS = CS % 256;\n  return CS;\n}\n\nif (msg.topic !== undefined) // command is written out\n{\n    topic = msg.topic;\n    // store the value topic back\n    context.set('topic',topic);\n    if (msg.payload.length === 5)\n    {\n        var cmd = {payload: msg.payload};\n        return [null, cmd];\n    }\n    else if (msg.payload.length === 4)\n    {\n        // add checksum\n        var CS = Buffer([calculate_CS(msg.payload)]);\n        //cmd_out = Buffer([msg.payload[0], msg.payload[1], msg.payload[2], msg.payload[3], CS])\n        cmd_out = Buffer.concat([msg.payload, CS], (msg.payload.length + 1));\n        var cmd = {payload: cmd_out};\n        return[null, cmd];\n        \n    }\n    else // no valid command\n    {\n        var cmd = {payload: 'error'};\n        return [cmd, null];\n    }\n    \n    \n}\nelse // receiving data from serial port\n{\n    topic = context.get('topic');\n    var input = msg.payload;\n    if (input.length === 13) // length of input is correct\n    {\n        var CS = calculate_CS(input.slice(0, 12));\n        if(CS !== input[12])\n        {\n            return[null, null];\n        }\n        var ser_data = {payload: input.slice(0, 12)};\n        ser_data.topic = topic;\n        return[ser_data, null];\n    }\n    else // input length is wrong\n    {\n        var cmd = {payload: 'length_error'};\n        return[cmd, null];\n    }\n    \n}",
        "outputs": "2",
        "noerr": 0,
        "x": 602,
        "y": 993,
        "wires": [
            [
                "e992325e.c0c1",
                "8d2a7cdb.b58b7",
                "351b3901.6902e6",
                "13a3a0e5.0d031f",
                "51df6859.3c31c8",
                "bbd7da95.ca5948"
            ],
            [
                "6e6e45f6.edeebc",
                "299849ba.f042d6"
            ]
        ]
    },
    {
        "id": "50ea41b3.c33ab",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 800,
        "y": 503,
        "wires": [
            [
                "a9e25efa.5135e"
            ]
        ]
    },
    {
        "id": "a9e25efa.5135e",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "",
        "func": "msg.topic = \"SELECT * FROM Fehlerspeicher ORDER BY Zeitstempel DESC LIMIT 1\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 969,
        "y": 502,
        "wires": [
            [
                "fcb0e8d7.5c3df8"
            ]
        ]
    },
    {
        "id": "6d34ac42.85fa94",
        "type": "delay",
        "z": "ef2e3d60.bc774",
        "name": "Queue",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "6",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 442.5,
        "y": 964,
        "wires": [
            [
                "b9b76688.542f78"
            ]
        ]
    },
    {
        "id": "8d2a7cdb.b58b7",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "serial_data",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 816,
        "y": 912,
        "wires": []
    },
    {
        "id": "70621311.470c0c",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "serial_in",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 588,
        "y": 1065,
        "wires": []
    },
    {
        "id": "351b3901.6902e6",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "Process serial number",
        "func": "var db_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Serial_number\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x08, 0x01]);\n        msg_ser_out.topic = \"Serial_number\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        db_msg.payload = msg.payload;\n        db_msg.topic = \"serial_number\"\n        return [db_msg, null];\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 654,
        "wires": [
            [
                "f087453c.a1e658"
            ],
            [
                "6d34ac42.85fa94"
            ]
        ]
    },
    {
        "id": "87699ef0.e481d",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "Serial_number",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 310,
        "y": 654,
        "wires": [
            [
                "351b3901.6902e6"
            ]
        ]
    },
    {
        "id": "f087453c.a1e658",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "print serial number",
        "func": "if (msg.topic === \"serial_number\") // should be always the case\n{\n    var text = msg.payload.toString();\n    msg = {payload: text};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 807,
        "y": 646,
        "wires": [
            [
                "44832dfb.4f0f04"
            ]
        ]
    },
    {
        "id": "9d7ba6f.1a7c358",
        "type": "comment",
        "z": "ef2e3d60.bc774",
        "name": "not finished",
        "info": "combine 3 outputs and decode with an additional function",
        "x": 899.5,
        "y": 426,
        "wires": []
    },
    {
        "id": "56e97ec.933438",
        "type": "mysql",
        "z": "ef2e3d60.bc774",
        "mydb": "448c7b52.637e04",
        "name": "Datenbank",
        "x": 1208,
        "y": 704,
        "wires": [
            []
        ]
    },
    {
        "id": "bdef5e92.03634",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "Online_data",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 293,
        "y": 777,
        "wires": [
            [
                "e992325e.c0c1"
            ]
        ]
    },
    {
        "id": "13a3a0e5.0d031f",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "Process current time",
        "func": "var data_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n\n\nif (msg.topic === \"Current_time\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        msg_ser_out.payload = Buffer([0x00, 0x01, 0x06, 0x01]);\n        msg_ser_out.topic = \"Current_time\";\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        data_msg.payload = msg.payload;\n        data_msg.topic = \"current_time\"\n        return [data_msg, null];\n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 558,
        "wires": [
            [
                "c0b021cf.d846d"
            ],
            [
                "6d34ac42.85fa94"
            ]
        ]
    },
    {
        "id": "19951882.41d5d7",
        "type": "ui_button",
        "z": "ef2e3d60.bc774",
        "name": "get_time",
        "group": "ff3a9e64.3083",
        "order": 3,
        "width": "3",
        "height": "1",
        "label": "Wechselrichter Zeit",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Current_time",
        "x": 305,
        "y": 514,
        "wires": [
            [
                "13a3a0e5.0d031f"
            ]
        ]
    },
    {
        "id": "c3643226.848c7",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "text_time",
        "label": "Inverter Zeit: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 1031,
        "y": 543,
        "wires": []
    },
    {
        "id": "c0b021cf.d846d",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "print current time",
        "func": "function pad(n) {\n    if (n<10) // do zero padding\n    {\n        var str = \"0\" + n.toString();\n        return str;\n    }\n    else\n    {\n        return n.toString();\n    }\n}\n\nif (msg.topic === \"current_time\") // should be always the case\n{\n    var buffer = msg.payload;\n    year = 2000 + buffer[0];\n    month = buffer[1];\n    day = buffer[2];\n    hour = buffer[3];\n    minute = buffer[4];\n    var text = day + \".\" + month + \".\" + year + \", \" + hour + \":\"+ pad(minute);\n    msg = {payload: text};\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 796,
        "y": 555,
        "wires": [
            [
                "c3643226.848c7"
            ]
        ]
    },
    {
        "id": "182a3dd1.ad1202",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "Current_time",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 289,
        "y": 557,
        "wires": [
            [
                "13a3a0e5.0d031f"
            ]
        ]
    },
    {
        "id": "617bece0.4bd8c4",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "overall_kWh",
        "label": "Gesamtertrag: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1314,
        "y": 892,
        "wires": []
    },
    {
        "id": "eb481f2c.887cb",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "day_kWh",
        "label": "Tagesertrag: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1292,
        "y": 849,
        "wires": []
    },
    {
        "id": "81687058.35a47",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "every_minute",
        "topic": "sleep",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 295,
        "y": 339,
        "wires": [
            [
                "51df6859.3c31c8"
            ]
        ]
    },
    {
        "id": "b4d7261f.6ad438",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "timeConvert",
        "func": "if ( !msg.timestamp ) msg.timestamp = Math.round(+new Date());\n\nvar dt = new Date(msg.timestamp);\nvar msg = {\n\t'month':\tdt.getMonth() + 1,\n\t'day':\t\tdt.getDate(),\n\t'year':\t\tdt.getFullYear(),\n\t'hours':\tdt.getHours(),\n\t'mins':\t\tdt.getMinutes(),\n\t'secs':\tdt.getSeconds()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 354,
        "y": 290,
        "wires": [
            []
        ]
    },
    {
        "id": "f3628588.b2b368",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "Noon",
        "topic": "noon",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "x": 263,
        "y": 389,
        "wires": [
            []
        ]
    },
    {
        "id": "51df6859.3c31c8",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "Inverter sleeps?",
        "func": "var state_msg = {payload:\"\"};\n// initialise the topic to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n\nif (msg.topic !== \"sleep\" )  // all topic relevant, instead of sleep\n{\n    count = 0;\n}\nelse // reset trigger comes in\n{\n    count += 1;\n}\ncontext.set('count', count);\nif (count > 1)\n{\n    state_msg.payload = \"schl√§ft\";\n}\nelse \n{\n    state_msg.payload = \"ist wach\";\n}\nreturn state_msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 553,
        "y": 338,
        "wires": [
            [
                "67058c38.4ffdc4"
            ]
        ]
    },
    {
        "id": "67058c38.4ffdc4",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wechselrichter ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1103,
        "y": 338,
        "wires": []
    },
    {
        "id": "b37b552f.a301d8",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "plot online data",
        "func": "if (msg.topic === \"pac\") // ac Power\n{\n    return [msg, null, null, null];\n}\nelse if (msg.topic === \"wd\") // day Wh\n{\n    return [null, msg, null, null];\n}\nelse if (msg.topic === \"wtot\")\n{\n    return [null, null, msg, null];\n}\nelse if (msg.topic === \"error\")\n{\n    var error = msg.payload;\n    var text = \"\";\n    if ((error === 0) || (error === 128))\n    {\n        text = \"keinen Fehler\";\n    }\n    else\n    {\n        text = error;\n    }\n    msg = {payload: text};\n    return [null, null, null, msg];\n}",
        "outputs": "4",
        "noerr": 0,
        "x": 1082,
        "y": 830,
        "wires": [
            [
                "ae9cbce4.48f2a"
            ],
            [
                "eb481f2c.887cb"
            ],
            [
                "617bece0.4bd8c4"
            ],
            [
                "8153df03.4a315"
            ]
        ]
    },
    {
        "id": "9d32aa97.954ba8",
        "type": "inject",
        "z": "ef2e3d60.bc774",
        "name": "",
        "topic": "Failure_memory",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 303,
        "y": 436,
        "wires": [
            [
                "bbd7da95.ca5948"
            ]
        ]
    },
    {
        "id": "bbd7da95.ca5948",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "Process failure memory",
        "func": "var data_msg = {payload:\"\"};\nvar msg_ser_out = {payload:\"\"};\n// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\n\nvar failure_cmd = Buffer([0x00, 0x01, 0x01]);\n\nif (msg.topic === \"Failure_memory\" )  // Relevant for this function\n{\n    if (msg.payload === true)  // trigger signal\n    {\n        count = 0x01;\n        var BN = Buffer([count]);                    // Block number\n        msg_ser_out.payload = Buffer.concat([failure_cmd, BN], (failure_cmd.length + 1));\n        msg_ser_out.topic = \"Failure_memory\";\n        \n        context.set('count', count);\n        return [null, msg_ser_out];\n    }\n    else // payload with buffer data\n    {\n        if (count < 0x32) // write failure_cmd\n        {\n            count +=1;\n            context.set('count', count);\n            var BN = Buffer([count]);                    // Block number\n            msg_ser_out.payload = Buffer.concat([failure_cmd, BN], (failure_cmd.length + 1));\n            msg_ser_out.topic = \"Failure_memory\";\n            \n            data_msg.payload = msg.payload;\n            data_msg.topic = \"failure_memory\";\n            return [data_msg, msg_ser_out];\n        }\n        else  // send last data out\n        {\n            data_msg.payload = msg.payload;\n            data_msg.topic = \"failure_memory\";\n            return [data_msg, null];\n        }\n        \n    }\n\n}\nelse // not relevant -> another query\n{\n    // do nothing\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 584,
        "y": 432,
        "wires": [
            [
                "ece8718e.485a"
            ],
            [
                "6d34ac42.85fa94"
            ]
        ]
    },
    {
        "id": "dad26e61.a3324",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "database_input",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1202,
        "y": 405,
        "wires": []
    },
    {
        "id": "ece8718e.485a",
        "type": "function",
        "z": "ef2e3d60.bc774",
        "name": "write failure data",
        "func": "function pad(n) {\n    if (n<10) // do zero padding\n    {\n        var str = \"0\" + n.toString();\n        return str;\n    }\n    else\n    {\n        return n.toString();\n    }\n}\n\nif (msg.topic === \"failure_memory\")\n{\n    var buffer = msg.payload;\n    // convert older data\n    var month = buffer[6];\n    var day = buffer[7];\n    var hour = buffer[8];\n    var minute = buffer[9];\n    var code = buffer[10];\n    var year = 2000 + buffer[11];  \n    \n    var timestring = \"\" + year + \"-\" + pad(month) + \"-\" + pad(day) + \",\" + pad(hour) + \":\" + pad(minute);\n    var data_string = \"'\" + timestring + \"', '\" + code + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `Fehlerspeicher` (`Zeit`, `Fehlercode`) VALUES (\" + data_string + \")\";\n    \n    node.send(db_msg);\n    \n    // convert newer data\n    var month = buffer[0];\n    var day = buffer[1];\n    var hour = buffer[2];\n    var minute = buffer[3];\n    var code = buffer[4];\n    var year = 2000 + buffer[5];  \n    \n    var timestring = \"\" + year + \"-\" + pad(month) + \"-\" + pad(day) + \",\" + pad(hour) + \":\" + pad(minute);\n    var data_string = \"'\" + timestring + \"', '\" + code + \"'\";\n    var db_msg = {topic: \"\"};\n    db_msg.topic = \"INSERT INTO `Fehlerspeicher` (`Zeit`, `Fehlercode`) VALUES (\" + data_string + \")\";\n    \n    return [db_msg];\n}\nelse // do nothing\n{\n    \n}\n\n",
        "outputs": "1",
        "noerr": 0,
        "x": 872,
        "y": 462,
        "wires": [
            [
                "fcb0e8d7.5c3df8",
                "dad26e61.a3324"
            ]
        ]
    },
    {
        "id": "fcb0e8d7.5c3df8",
        "type": "mysql",
        "z": "ef2e3d60.bc774",
        "mydb": "448c7b52.637e04",
        "name": "Datenbank",
        "x": 1132,
        "y": 469,
        "wires": [
            [
                "943fc306.d2f73"
            ]
        ]
    },
    {
        "id": "943fc306.d2f73",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "database_output",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1322,
        "y": 492,
        "wires": []
    },
    {
        "id": "602ab448.53981c",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "chart_out",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1419,
        "y": 807,
        "wires": []
    },
    {
        "id": "8153df03.4a315",
        "type": "ui_text",
        "z": "ef2e3d60.bc774",
        "group": "ff3a9e64.3083",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Fehler",
        "label": "Wechselrichter hat: ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1288,
        "y": 935,
        "wires": []
    },
    {
        "id": "e9b7653c.88cd98",
        "type": "debug",
        "z": "ef2e3d60.bc774",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1081,
        "y": 959,
        "wires": []
    }
]